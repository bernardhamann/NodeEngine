{
  "name": "ne-render",
  "version": "1.7.0",
  "description": "Rendering React with React-Router on the server with Pre-Render Data from API's added to the state and props",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/node-engine/ne-render.git"
  },
  "author": {
    "name": "Bernard Hamann"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/node-engine/ne-render/issues"
  },
  "homepage": "https://github.com/node-engine/ne-render#readme",
  "dependencies": {
    "axios": "^0.7.0",
    "lodash": "^3.10.1",
    "react": "^0.13.3",
    "react-router": "^0.13.3"
  },
  "readme": "# ne-render (Node Engine Render)\n\n## Server rendering in NodeJS with React and React-Router \n\nA tool to render pages Node Engine style on a NodeJS server.\n\nRendering React with React-Router on the server with Pre-Render Data from API's added to the state and props.\n\n// Server Rendering with React Router but after getting data from a api request.\n// This version stores the data request in the page object for that path\n\n## Sample Server file\n\n```js\n\n////////////////////////\n// Create the Server\n////////////////////////\n\nvar nodeEngineServer = require('ne-server');\nvar server = nodeEngineServer.init(process.env.PORT);\n\nvar mongoose = require('mongoose');\nmongoose.connect(process.env.MONGO_URL);\n\n\n//////////////////////\n// Static Assets\n//////////////////////\n\nvar dirName = __dirname;\nvar cacheTime = 100;\n\nnodeEngineServer.static(server, dirName, cacheTime);\n\n\n///////////////\n// REST API\n///////////////\n\nvar mongoRest = require('ne-mongo-rest');\n\nvar apiPath = \"/api\";\nmongoRest.server(server, dirName, apiPath);\n\n\n//////////////////////////////\n// Express Test\n//////////////////////////////\n\nserver.use('/express', require('./server/express'));\n\n\n////////////////////////////////////////////////////////////\n// Rendering React with React-Router on the server with Pre-Render Data from API's\n////////////////////////////////////////////////////////////\n\nvar neRender = require('ne-render');\nvar appmeta = require ('./appmeta');\nvar routes = require ('./routes');\n\nneRender.serverRender(server, appmeta, routes);\n\n```\n\n## Sample routes File\n\n```js\n\n'use strict';\n\nimport React from 'react';\nimport {Router, Route, DefaultRoute, NotFoundRoute } from 'react-router';\n\n// Handlers\nimport MainHandler from './handlers/MainHandler.js';\nimport IndexHandler from './handlers/IndexHandler.js';\nimport AboutHandler from './handlers/AboutHandler.js';\nimport ContactHandler from './handlers/ContactHandler.js';\nimport PostsHandler from './handlers/PostsHandler.js';\nimport PeopleHandler from './handlers/PeopleHandler.js';\nimport NotFoundHandler from './handlers/NotFoundHandler.js';\n\nvar Routes = (\n    <Route name=\"MainRoute\" path=\"/\" handler={MainHandler}>\n        <Route name=\"about\" path=\"about\" handler={AboutHandler}></Route>\n        <Route name=\"contact\" path=\"contact\" handler={ContactHandler}></Route>\n        <Route name=\"posts\" path=\"posts\" handler={PostsHandler}></Route>\n        <Route name=\"posts/:id\" path=\"posts/:id\" handler={PostsHandler}></Route>\n        <Route name=\"people\" path=\"people\" handler={PeopleHandler}></Route>\n        <DefaultRoute name=\"IndexRoute\" handler={IndexHandler}></DefaultRoute>\n        <NotFoundRoute name=\"NotFoundRoute\" handler={NotFoundHandler}></NotFoundRoute>\n    </Route>\n);\n\nexport default Routes;\n\n\n```\n\n## Sample appConfig File\n\n```js\n\nvar appmeta = {\n\n    globals: {\n        \"APPNAME\": \"Node Engine Sample\",\n        \"SITENAME\": \"Node Engine Sample\",\n        \"DESCRIPTION\": \"A Example site for the Node Engine Approach\"\n    },\n\n    paths: [\n\n        {\n            path: \"/about\",\n            title: \"About Us\",\n            description: \"This is About Us page\"\n        },\n\n        {\n            path: \"/contact\",\n            title: \"Contact Us\",\n            description: \"This is Contact Us page\"\n        },\n\n        {\n            path: \"/posts\",\n            title: \"Posts\",\n            description: \"This is Posts page\",\n\n            nedBefore:\n            {\n                number: 1,\n                nedb1:\n                {\n                    path: \"http://localhost:3001/api/posts\"\n                }\n            }\n        },\n\n        {\n            path: \"/something\",\n            title: \"Something\",\n            description: \"This is Something\",\n\n            nedCustom:\n            {\n                call:  \"something\"\n            }\n        }\n\n    ],\n\n    custom: function(meta, req){\n\n        console.log('meta in custom at trans');\n        console.log(meta);\n\n        switch (meta.nedCustom.call){\n            case 'something':\n                console.log('something case matched');\n                return this.something(meta, req);\n        }\n    },\n\n    something: function (meta, req){\n\n        // Example usage can be to use the req.params to change the meta title\n\n        meta.title = \"Dynamic Title for \" + req.path;\n        console.log('Do something with the routeMeta object before sending it back');\n        return meta\n\n    }\n\n};\n\nmodule.exports = appmeta;\n\n\n```\n\n## Sample configDevelopment File\n\n```json\n\n{\n  \"env\": {\n    \"NODE_ENV\"         : \"development\",\n    \"ROOTURL\"          : \"http://localhost:3001\",\n    \"PORT\"             : 3001,\n    \"MONGO_URL\"        : \"mongodb://username:password@domain.com:27000/databasename\",\n    \"SENDGRID_APIKEY\"  : \"xxx\",\n  }\n}\n\n```\n\n## Sample configProduction File\n\n```json\n\n{\n  \"env\": {\n    \"NODE_ENV\"         : \"production\",\n    \"ROOTURL\"          : \"http://domain.com\",\n    \"PORT\"             : 3001,\n    \"MONGO_URL\"        : \"mongodb://username:password@domain.com:27000/databasename\",\n    \"SENDGRID_APIKEY\"  : \"xxx\",\n  }\n}\n\n```\n\n## Sample component file\n\n``` js\n\nimport React from 'react';\n\nclass Head extends React.Component {\n\n    render(){\n\n        return (\n            <head>\n                <title>{`${this.props.meta.title} - ${this.props.meta.globals.SITENAME}`}</title>\n                <meta name=\"description\" content={this.props.meta.description}/>\n                <link rel='stylesheet' href='/style.css' />\n                <meta charSet=\"UTF-8\" />\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n                <script src=\"http://html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\n            </head>\n        )\n\n    }\n}\n\nexport default Head;\n\n```\n\n## Sample API file in the apiPath folder \n\n```js\n\nvar router = require('express').Router();\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\nvar mongoRest = require('ne-mongo-rest');\n\nvar modelSchema = new Schema({\n    firstName:{type: String, required: true},\n    lastName:{type: String, required: true},\n    email:{type: String, required: true},\n    createdAt:{type: String, required: true, default: new Date()}\n});\n\nvar Model = mongoose.model(\n    'people',\n    modelSchema,\n    'people'\n    );\n\nmongoRest.model(router, Model);\n\nmodule.exports = router;\n\n\n```\n\n## License \n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Bernard Hamann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "readme.md",
  "gitHead": "a72dbb963d629ec87058e21f9123192593d5082c",
  "_id": "ne-render@1.7.0",
  "_shasum": "8c489519bc47d1ff3a9b6ee54804a85801d92e9d",
  "_from": "ne-render@>=1.6.0 <2.0.0"
}
