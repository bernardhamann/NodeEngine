{
  "name": "ne-data",
  "version": "1.9.2",
  "description": "description",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/node-engine/ne-data.git"
  },
  "author": {
    "name": "Bernard Hamann"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/node-engine/ne-data/issues"
  },
  "homepage": "https://github.com/node-engine/ne-data#readme",
  "dependencies": {
    "cors": "^2.7.1",
    "express": "^4.13.3",
    "lodash": "^3.10.1",
    "ne-auth": "latest",
    "passport-http-bearer": "^1.0.1"
  },
  "readme": "# ne-data (Node Engine Data)\n\nA quick and simple way to create a structured restAPI using, NodeJS, MongoDB and Mongoose.\n\n## Snippit from the Server file \n\nJust add this code and it will automatically add any additional files you place in the api folder. the route for the api will be domain.com/apiPath/filename\n\nwhere\n- apiPath is the apiPath you set in the server file \n- filename is the name of the file in the api folder\n\n```js\n\nvar neData = require('ne-data');\n\nvar dirName = __dirname;\nvar apiPath = \"/api\";\nneData.server(server, dirName, apiPath);\n\n\n```\n\n## Sample API file\n\nDefine the schema in any way you want and create as many as you want.\n\nThese files need to be in a folder matching the apiPath you provides in the same directory as the server file\n\n```js\n\nvar router = require('express').Router();\nvar mongoose = require('mongoose');\nvar neData = require('ne-data');\n\nvar pageSchema = {\n    path:{type: String, required: true},\n    title:{type: String, required: true},\n    description:{type: String, required: true},\n    pd:{\n        pdNumber:{type: Number, required: false, default: '0'},\n        pd1:{\n            path: {type: String, required: false}\n        }\n    },\n    createdAt:{type: String, required: true}\n\n};\n\nvar Model = mongoose.model(\n    'Page',\n    pageSchema,\n    'page');\n\n\nneData.model(router, Model);\n\n\nmodule.exports = router;\n\n\n```\n\n## API Features\n\nPost \nThe entire request body becomes the object that is posted\n\nGet\nGet by Id\nGet with Limit results to number \nGet with Limit and cycle \n\nPut \nPut by Id\n\nDelete\nDelete by Id\n\nUse query field value pairs find specific documents\nhttp://localhost:3001/api/page?f1=pathField&v1=pathFieldValue\n\n- get will get the document where the pathField matches the pathFieldValue\n- delete will delete the document where the pathField matches the pathFieldValue\n- put will edit the document where the pathField matches the pathFieldValue, two addidional query params are needed to give the field you want to edit and the new value for the that field\n\nIf you are interested in more details on the working of the api please ask.\n\n\n## Steps\n\n1. Connect to mongoDB using mongoose\n2. Require and NPM install the dependencies \n3. Define your schema using mongoose syntax\n4. Use the schema to create a Model\n5. Activate neData by calling neData.init(router, Model)\n\n\n## POST\n\n### Add a document to a collection\n\npost request\n- http://localhost:3001/api/people\n\nwhere \n- people = name of the model/collection\n- req.body = the document you want to add\n- example req.body \n\n```json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Jackson\",\n  \"email\": \"john@jackson.com\"\n}\n```\n\nresults \n- Adds the contents of the req.body as a document to the people collection using the mongoose schema.\n\ncomments\n- Example post req with Json body using Postman.\n\n![Post Example using postman](https://raw.githubusercontent.com/node-engine/ne-rest-mongoose/master/media/postman.png)\n\n\n## GET \n\n### Get all in collection\n\nget request\n- http://localhost:3001/api/people\n\nwhere \n- api = the apiPath you specified\n- people = name of the model/collection\n\nresults \n- all documents in the people collection\n\n\n### Limit the request to a a number of documents\n\nget request\n- http://localhost:3001/api/people?limit=3\n\nwhere \n- api = the apiPath you specified\n- people = name of the model/collection\n- query: limit = the number of documents you want\n\nresults \n- the first 3 documents in the people collection \n\n\n### Cycle through docs in the collection\n\nget request 1\n- http://localhost:3001/api/people?limit=3&batch=1\n\nwhere \n- api = the apiPath you specified\n- people = name of the model/collection\n- query: limit = the number number of documents in a cycle \n- query: batch = the cycle number\n\nresults \n- the 1st, 2nd and 3rd document in the collection\n\nget request 2\n- http://localhost:3001/api/people?limit=3&batch=2\n\nwhere \n- api = the apiPath you specified\n- people = name of the model/collection\n- query: limit = the number number of documents in a cycle \n- query: batch = the cycle number\n\nresults \n- the 4th, 5th and 6th document in the collection\n\nget request 3\n- http://localhost:3001/api/people?limit=3&batch=3\n\nwhere \n- api = the apiPath you specified\n- people = name of the model/collection\n- query: limit = the number number of documents in a cycle \n- query: batch = the cycle number\n\nresults \n- the 7th, 8th and 9th document in the collection\n\n\n### Search for documents where a field matches a value\n\nget request\n- http://localhost:3001/api/people?f1=firstName&v1=John\n\nwhere \n- api = the apiPath you specified\n- people = name of the model/collection\n- query: f1 = the field you want to search by\n- query: v1 = the value in the f1 filed you are looking to match\n\nresults \n- all documents in the people collection where the firstName field is John\n\ncomments \n- the search in case sensitive, so if you type john instead og Johh it will not find it.\n\n\n### Get one document in a collection using the document _id\n\nget request\n- http://localhost:3001/api/people/55eefa231c0eba0d2c72af40\n\nwhere \n- api = the apiPath you specified\n- people = name of the model/collection\n- 55eefa231c0eba0d2c72af40 = the _id of the document you want\n\nresults \n- The document with the _id of 55eefa231c0eba0d2c72af40\n\n\n## PUT\n\n### Search for documents where a field matches a value and give a new value to a field in those documents\n\nput request\n- http://localhost:3001/api/people?f1=firstName&v1=John&fs1=email&vs1=john@jackstrade.com\n\nwhere \n- api = the apiPath you specified\n- people = name of the model/collection\n- query: f1 = the field you want to search by\n- query: v1 = the value in the f1 filed you are looking to match\n- query: fs1 = the field you want to edit\n- query: vs1 = the new value for the field you want to edit\n\nresults \n- all documents in the people collection where the firstName field is John gets given a new value of john@jackstrade.com for the email field\n\ncomments \n- the search in case sensitive, so if you type john instead og Johh it will not find it. \n- you can search by one field and edit another field\n- if more than one document matches the search then all those documents will be updated\n- By default only one document is edited if you want to edit all documents matching the query then at a query param called multi=yes (?multi=yes or &multi=yes) \n\n\n### Search for documents where a field matches a value and use a json request body object to update the fields\n\nput request\n- http://localhost:3001/api/people?f1=firstName&v1=John\n\nwhere \n- api = the apiPath you specified\n- people = name of the model/collection\n- query: f1 = the field you want to search by\n- query: v1 = the value in the f1 filed you are looking to match\n\nresults \n- all documents in the people collection where the firstName field is John\n\ncomments\n\n- See the MongoDB docs on how to format the json req body (http://docs.mongodb.org/manual/reference/method/db.collection.update)\n- By default only one document is edited if you want to edit all documents matching the query then at a query param called multi=yes (?multi=yes or &multi=yes) \n\n- for\n\n```json\n\n{\n  \"_id\": \"55eefa231c0eba0d6c72af40\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Jackson\",\n  \"email\": \"mail@mail.com\",\n  \"detail\": {\n            \"thing\": \"thing value\"\n          },\n  \"__v\": 0,\n  \"createdAt\": \"Fri Sep 18 2015 17:09:51 GMT+0200 (SAST)\"\n}\n\n```\n- use this reg body object to define what to edit\n\n```json\n\n{\n  \"detail.thing\": \"new thing value\",\n  \"email\": \"newmail@mail.com\"\n}\n \n```\n\n### Search for documents by _id and use a json request body object to update the fields\n\nput request\n- http://localhost:3001/api/people/55eefa231c0eba0d6c72af40\n\nwhere \n- api = the apiPath you specified\n- people = name of the model/collection\n- 55eefa231c0eba0d6c72af40 = the _id of the document you want to edit\n\nresults \n- all documents in the people collection where the firstName field is John\n\ncomments\n\n- See the MongoDB docs on how to format the json req body (http://docs.mongodb.org/manual/reference/method/db.collection.update)\n- By default only one document is edited if you want to edit all documents matching the query then at a query param called multi=yes (?multi=yes or &multi=yes) \n\n- for\n\n```json\n\n{\n  \"_id\": \"55eefa231c0eba0d6c72af40\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Jackson\",\n  \"email\": \"mail@mail.com\",\n  \"detail\": {\n            \"thing\": \"thing value\"\n          },\n  \"__v\": 0,\n  \"createdAt\": \"Fri Sep 18 2015 17:09:51 GMT+0200 (SAST)\"\n}\n\n```\n- use this reg body object to define what to edit\n\n```json\n\n{\n  \"detail.thing\": \"new thing value\",\n  \"email\": \"newmail@mail.com\"\n}\n \n \n```\n\n## DELETE\n\n### Remove a document from a collection using a field value combination\n\ndelate request\n- http://localhost:3001/api/people?f1=firstName&v1=John\n\nwhere \n- people = name of the model/collection\n- api = the apiPath you specified\n- query: f1 = the field you want to search by\n- query: v1 = the value in the f1 filed you are looking to match\n\nresults \n- remove documents in the people collection where the firstName field is John\n\ncomments \n- the search in case sensitive, so if you type john instead og Johh it will not find it.\n\n\n### Remove one document in a collection using the document _id\n\ndelete request\n- http://localhost:3001/api/people/55eefa231c0eba0d2c72af40\n\nwhere \n- people = name of the model/collection\n- 55eefa231c0eba0d2c72af40 = the _id of the document you want to remove\n\nresults \n- The document with the _id of 55eefa231c0eba0d2c72af40 is removed\n\n\n## License \n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Bernard Hamann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "readme.md",
  "gitHead": "04900c18fddc8818a48110e576c5b78ab432d4eb",
  "_id": "ne-data@1.9.2",
  "_shasum": "a465d7a0a35157c5f7a3e114f0f7c83bd3aee172",
  "_from": "ne-data@>=1.9.2 <2.0.0"
}
